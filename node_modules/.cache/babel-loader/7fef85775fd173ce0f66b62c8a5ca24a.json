{"ast":null,"code":"import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar GradientGenerator = function (_Component) {\n  inherits(GradientGenerator, _Component);\n\n  function GradientGenerator() {\n    classCallCheck(this, GradientGenerator);\n    return possibleConstructorReturn(this, (GradientGenerator.__proto__ || Object.getPrototypeOf(GradientGenerator)).apply(this, arguments));\n  }\n\n  createClass(GradientGenerator, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          startColor = _props.startColor,\n          endColor = _props.endColor,\n          steps = _props.steps;\n      var gradients = this.generateGradient(startColor, endColor, steps);\n\n      if (gradients) {\n        this.props.getGradients(gradients);\n      } else {\n        throw new Error('Cannot generate gradients, make sure start and color are in hex format !');\n      }\n\n      return null;\n    }\n  }, {\n    key: 'generateGradient',\n    value: function generateGradient(start, end, steps) {\n      // parse RGB values to each {Red, Green, Blue} keys\n      var startRGB = this.hexToRgb(start);\n      var endRGB = this.hexToRgb(end);\n      var gradients = []; // generate color for each steps provided then push the value to gradients array\n\n      for (var step = 1; step <= steps; step++) {\n        var colors = {};\n        var _arr = ['red', 'green', 'blue'];\n\n        for (var _i = 0; _i < _arr.length; _i++) {\n          var color = _arr[_i];\n          colors[color] = this.colorMaker(startRGB[color], endRGB[color], steps, step);\n        }\n\n        var rgb = 'rgb(' + colors['red'] + ', ' + colors['green'] + ', ' + colors['blue'] + ')';\n        gradients.push(rgb); // inserting in the dom\n\n        var node = document.createElement('div'); // Create a <li> node\n\n        node.style.backgroundColor = rgb;\n        document.querySelector('body').appendChild(node);\n      }\n\n      return gradients;\n    }\n  }, {\n    key: 'colorMaker',\n    value: function colorMaker(start, end, steps, step) {\n      // let redDiff = (start.red > end.red) ? start.red - end.red : end.red - start.red;\n      var val = void 0;\n\n      if (start > end) {\n        var singleStep = (start - end) / steps;\n        val = start - singleStep * step;\n      } else if (end > start) {\n        var _singleStep = (end - start) / steps;\n\n        val = start + _singleStep * step;\n      } else {\n        val = start | end;\n      }\n\n      return ~~val;\n    } // strng to object converson\n\n  }, {\n    key: 'parseRGB',\n    value: function parseRGB(rgb) {\n      var baseSplit = rgb.split('(')[1].split(',');\n      var red = parseInt(baseSplit[0], 1);\n      var green = parseInt(baseSplit[1], 1);\n      var blue = parseInt(baseSplit[2].split(')')[0], 1);\n      return {\n        red: red,\n        green: green,\n        blue: blue\n      };\n    }\n  }, {\n    key: 'showGradient',\n    value: function showGradient(e) {\n      var start = this.hexToRgb(this.state.startColor);\n      var end = this.hexToRgb(this.state.endColor);\n      var gradientColors = this.generateGradient(start, end, this.state.steps);\n      this.setState({\n        gradientColors: gradientColors\n      });\n    }\n  }, {\n    key: 'hexToRgb',\n    value: function hexToRgb(hex) {\n      var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? {\n        red: parseInt(result[1], 16),\n        green: parseInt(result[2], 16),\n        blue: parseInt(result[3], 16)\n      } : null;\n    }\n  }]);\n  return GradientGenerator;\n}(Component);\n\nGradientGenerator.propTypes = {\n  startColor: PropTypes.string,\n  endColor: PropTypes.string,\n  steps: PropTypes.number,\n  getGradients: PropTypes.func\n};\nexport default GradientGenerator;","map":null,"metadata":{},"sourceType":"module"}